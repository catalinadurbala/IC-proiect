# -*- coding: utf-8 -*-

"""
This TASTYL program evaluates a circuit generated with the FairplayMP compiler [http://fairplayproject.net/fairplayMP.html].

As example we use an addition circuit generated by FairplayMP:

> cat Add.sfdl
program Add{
  type int = Int<4>;

  type Alice = struct {int input, Int<5> output};
  type Bob = struct {int input};

  function void main (Alice alice, Bob bob){
    alice.output = (alice.input + bob.input);
  }
}
>

This program can be compiled into a circuit using the FairplayMP compiler (version 2.1):
FairplayMP/compiler> java sfdl.Compiler Add.sfdl --optimize

The output circuit is written into 'Add.sfdl.shdl':
> cat Add.sfdl.shdl
// general info
// gates: 18
// wires: 26
input_player:alice:4:1
input:alice.input:4
input_player:bob:4:1
input:bob.input:4

result_player:alice:1
result:alice.output:5:8:11:16:21:25

gate:0:8:0:4:6
gate:1:9:1:5:6
gate:2:10:0:4:1
gate:3:11:9:10:6
gate:4:12:2:6:6
gate:5:13:1:5:1
gate:6:14:9:10:1
gate:7:15:13:14:7
gate:8:16:12:15:6
gate:9:17:3:7:6
gate:10:18:2:6:1
gate:11:19:12:15:1
gate:12:20:18:19:7
gate:13:21:17:20:6
gate:14:22:3:7:1
gate:15:23:17:20:1
gate:16:24:22:23:7
gate:17:25:17:24:6
>

This circuit is securely evaluated by the following TASTYL program.
"""

def protocol(client, server, params):
    gc = GarbledCircuit(
        FairplayCircuit(protocol_path("Add.sfdl.shdl")),
        ["alice.input", "bob.input"],
        ["alice.output"])

    # Plain inputs
    client.x = Signed(bitlen=4).input(src=driver, desc="a")
    server.y = Signed(bitlen=4).input(src=driver, desc="b")

    # Convert plain to garbled inputs
    client.gx = Garbled(val=client.x)
    server.gy = Garbled(val=server.y)
    client.gy <<= server.gy

    # Evaluate GC
    client.gz, = gc([client.gx, client.gy])

    # Convert garbled to plain outputs
    client.z = Signed(val=client.gz)

    ## Output results
    client.z.output(dest=driver, desc="zc")
