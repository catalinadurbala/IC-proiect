"""
In this file you can define replacement circuits for arbitrary gates.
A sample 3 input gate looks like this:

  C  B  A
  |  |  |
 ----------
|00110011|
----------
    |
 output

he truth table format:

A truth table consists of 8 digits, each can be 0 or 1. 
It's indexed from beginning to the end.
Example:
truth table: 0 0 1 1 0 1 0 1
index:       0 1 2 3 4 5 6 7

The digit of at an index position is the output of the gate.
In the next table you can see which index maps to which configuration of the inputs:

 C B A | truth_table_index
 ------------------------
 0 0 0 | 0
 0 0 1 | 1
 0 1 0 | 2
 0 1 1 | 3 
 1 0 0 | 4
 1 0 1 | 5
 1 1 0 | 6
 1 1 1 | 7

The grammar for the replacement circuit:
binDigit    := '0'|'1'
truth_table := binDigit { binDigit }
constInput  := binDigit
input       := constInput | 'A' | 'B' | 'C' | gate
gate        := '(' input { ',' input } ')[' truth_table ']'
comment     := '//'{*}
replacement := truth_table ' ' gate
line        := comment | replacement 'CRLF'
"""

rules = """
00000000 0
00000001 ((A,B)[0001],C)[0001]
00000011 (B,C)[0001]
00000101 (A,C)[0001]
00000110 ((A,B)[0110],C)[0001]
00001001 ((A,B)[0110],C)[0010]
00001010 (A,C)[0010]
00001100 (B,C)[0010]
00001111 C
00010001 (A,B)[0001]
00010010 (B,(A,C)[0110])[0001]
00010100 (A,(B,C)[0110])[0001]
00010111 (((A,B)[0110],(A,C)[0110])[0001],A)[0110]
00011000 ((A,B)[0110],(A,C)[0110])[0010]
00011011 ((A,(B,C)[0110])[0001],C)[0110]
00011101 ((B,(A,C)[0110])[0001],C)[0110]
00011110 ((A,B)[0001],C)[0110]
00100001 (B,(A,C)[0110])[0100]
00100010 (A,B)[0010]
00100100 ((A,B)[0110],(A,C)[0110])[0100]
00100111 ((A,(B,C)[0110])[0001],B)[0110]
00101000 (A,(B,C)[0110])[0010]
00101011 (((A,B)[0110],(A,C)[0110])[0010],B)[0110]
00101101 ((A,B)[0010],C)[0110]
00101110 ((B,(A,C)[0110])[0100],C)[0110]
00110000 (B,C)[0100]
00110011 B
00110101 (((A,B)[0110],C)[0001],B)[0110]
00110110 ((A,C)[0001],B)[0110]
00111001 ((A,C)[0010],B)[0110]
00111010 (((A,B)[0110],C)[0010],B)[0110]
00111100 (B,C)[0110]
00111111 (B,C)[0111]
01000001 (A,(B,C)[0110])[0100]
01000010 ((A,B)[0110],(A,C)[0110])[0001]
01000100 (A,B)[0100]
01000111 ((B,(A,C)[0110])[0001],A)[0110]
01001000 (B,(A,C)[0110])[0010]
01001011 ((A,B)[0100],C)[0110]
01001101 (((A,B)[0110],(A,C)[0110])[0001],C)[0110]
01001110 ((A,(B,C)[0110])[0100],C)[0110]
01010000 (A,C)[0100]
01010011 (((A,B)[0110],C)[0001],A)[0110]
01010101 A
01010110 ((B,C)[0001],A)[0110]
01011001 ((B,C)[0010],A)[0110]
01011010 (A,C)[0110]
01011100 (((A,B)[0110],C)[0010],A)[0110]
01011111 (A,C)[0111]
01100000 ((A,B)[0110],C)[0100]
01100011 ((A,C)[0100],B)[0110]
01100101 ((B,C)[0100],A)[0110]
01100110 (A,B)[0110]
01101001 ((B,C)[0110],A)[0110]
01101010 ((B,C)[0111],A)[0110]
01101100 ((A,C)[0111],B)[0110]
01101111 ((A,B)[0110],C)[0111]
01110001 (((A,B)[0110],(A,C)[0110])[0001],B)[0110]
01110010 ((A,(B,C)[0110])[0100],B)[0110]
01110100 ((B,(A,C)[0110])[0100],A)[0110]
01110111 (A,B)[0111]
01111000 ((A,B)[0111],C)[0110]
01111011 (B,(A,C)[0110])[0111]
01111101 (A,(B,C)[0110])[0111]
01111110 ((A,B)[0110],(A,C)[0110])[0111]
01111111 ((A,B)[0111],C)[0111]
10000001 ((A,B)[0110],(A,C)[0110])[1000]
10000010 (A,(B,C)[0110])[1000]
10000100 (B,(A,C)[0110])[1000]
10000111 ((A,B)[1000],C)[0110]
10001000 (A,B)[1000]
10001011 ((B,(A,C)[0110])[1000],C)[0110]
10001101 ((A,(B,C)[0110])[1000],C)[0110]
10001110 (((A,B)[0110],(A,C)[0110])[1000],C)[0110]
10010000 ((A,B)[0110],C)[1000]
10010011 ((A,C)[1000],B)[0110]
10010101 ((B,C)[1000],A)[0110]
10010110 ((B,C)[0110],A)[1001]
10011001 (A,B)[1001]
10011010 ((B,C)[1011],A)[0110]
10011100 ((A,C)[1011],B)[0110]
10011111 ((A,B)[0110],C)[1011]
10100000 (A,C)[1000]
10100011 (((A,B)[0110],C)[1000],B)[0110]
10100101 (A,C)[1001]
10100110 ((B,C)[1101],A)[0110]
10101001 ((B,C)[1110],A)[0110]
10101010 (A)[10]
10101100 (((A,B)[0110],C)[1011],B)[0110]
10101111 (A,C)[1011]
10110001 ((A,(B,C)[0110])[1000],B)[0110]
10110010 (((A,B)[0110],(A,C)[0110])[1000],B)[0110]
10110100 ((A,B)[1011],C)[0110]
10110111 (B,(A,C)[0110])[1101]
10111000 ((B,(A,C)[0110])[1101],C)[0110]
10111011 (A,B)[1011]
10111101 ((A,B)[0110],(A,C)[0110])[1110]
10111110 (A,(B,C)[0110])[1011]
11000000 (B,C)[1000]
11000011 (B,C)[1001]
11000101 (((A,B)[0110],C)[1000],A)[0110]
11000110 ((A,C)[1101],B)[0110]
11001001 ((A,C)[1110],B)[0110]
11001010 (((A,B)[0110],C)[1011],A)[0110]
11001100 (B)[10]
11001111 (B,C)[1011]
11010001 ((B,(A,C)[0110])[1000],A)[0110]
11010010 ((A,B)[1101],C)[0110]
11010100 (((A,B)[0110],(A,C)[0110])[1000],A)[0110]
11010111 (A,(B,C)[0110])[1101]
11011000 ((A,(B,C)[0110])[1101],C)[0110]
11011011 ((A,B)[0110],(A,C)[0110])[1011]
11011101 (A,B)[1101]
11011110 (B,(A,C)[0110])[1011]
11100001 ((A,B)[1110],C)[0110]
11100010 ((B,(A,C)[0110])[1101],A)[0110]
11100100 ((A,(B,C)[0110])[1101],B)[0110]
11100111 ((A,B)[0110],(A,C)[0110])[1101]
11101000 (((A,B)[0110],(A,C)[0110])[1011],B)[0110]
11101011 (A,(B,C)[0110])[1110]
11101101 (B,(A,C)[0110])[1110]
11101110 (A,B)[1110]
11110000 (C)[10]
11110011 (B,C)[1101]
11110101 (A,C)[1101]
11110110 ((A,B)[0110],C)[1101]
11111001 ((A,B)[0110],C)[1110]
11111010 (A,C)[1110]
11111100 (B,C)[1110]
11111111 1
"""

####################################################################
## Do not edit here unless you know what you're doing!            ##
##                                                                ##
## parses that rules and create a python-usable translation table ##

translate = [None for i in xrange(1<<(1<<3))]

for __line in rules.split('\n'):
    # skip comments and empty lines
    if __line == "" or __line[0:2] == '//':
        continue
    
    # compute address
    __addr = 0
    for __i in __line[:1<<3]:
        __addr = (__addr << 1) | (ord(__i) - ord('0'))
        
    # fill translation table
    translate[__addr] = __line[(1<<3)+1:]
